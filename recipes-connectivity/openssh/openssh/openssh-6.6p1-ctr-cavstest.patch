From bf3211bbff5cb9e1ef588f74844b04e09a9ad2b6 Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Sat, 21 Dec 2019 13:05:19 +0800
Subject: [PATCH] add CAVS test driver for the aes-ctr ciphers

Original submission to Fedora, see:
   https://lists.fedoraproject.org/pipermail/scm-commits/2012-January/715044.html

this version download from:
   http://pkgs.fedoraproject.org/cgit/rpms/openssh.git/plain/openssh-6.6p1-ctr-cavstest.patch
   (as of commit 0ca1614ae221578b6b57c61d18fda6cc970a19ce)

Makefile.in slightly modified for integration

This is the makefile.in change for the normal configuration.

Signed-off-by: Mark Hatle <mark.hatle@windriver.com>

Upstream-Status: Inappropriate [oe specific]
Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
Signed-off-by: Yi Zhao <yi.zhao@windriver.com>
---
 Makefile.in    |   7 +-
 ctr-cavstest.c | 215 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 221 insertions(+), 1 deletion(-)
 create mode 100644 ctr-cavstest.c

diff --git a/Makefile.in b/Makefile.in
index 57f94f4..0accd89 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -23,6 +23,7 @@ SSH_PROGRAM=@bindir@/ssh
 ASKPASS_PROGRAM=$(libexecdir)/ssh-askpass
 SFTP_SERVER=$(libexecdir)/sftp-server
 SSH_KEYSIGN=$(libexecdir)/ssh-keysign
+CTR_CAVSTEST=$(libexecdir)/ctr-cavstest
 SSH_PKCS11_HELPER=$(libexecdir)/ssh-pkcs11-helper
 SSH_SK_HELPER=$(libexecdir)/ssh-sk-helper
 PRIVSEP_PATH=@PRIVSEP_PATH@
@@ -68,7 +69,7 @@ MKDIR_P=@MKDIR_P@
 
 .SUFFIXES: .lo
 
-TARGETS=ssh$(EXEEXT) sshd$(EXEEXT) ssh-add$(EXEEXT) ssh-keygen$(EXEEXT) ssh-keyscan${EXEEXT} ssh-keysign${EXEEXT} ssh-pkcs11-helper$(EXEEXT) ssh-agent$(EXEEXT) scp$(EXEEXT) sftp-server$(EXEEXT) sftp$(EXEEXT) ssh-sk-helper$(EXEEXT)
+TARGETS=ssh$(EXEEXT) sshd$(EXEEXT) ssh-add$(EXEEXT) ssh-keygen$(EXEEXT) ssh-keyscan${EXEEXT} ssh-keysign${EXEEXT} ssh-pkcs11-helper$(EXEEXT) ssh-agent$(EXEEXT) scp$(EXEEXT) sftp-server$(EXEEXT) sftp$(EXEEXT) ssh-sk-helper$(EXEEXT) ctr-cavstest$(EXEEXT)
 
 XMSS_OBJS=\
 	ssh-xmss.o \
@@ -232,6 +233,9 @@ ssh-pkcs11-helper$(EXEEXT): $(LIBCOMPAT) libssh.a $(P11HELPER_OBJS)
 ssh-sk-helper$(EXEEXT): $(LIBCOMPAT) libssh.a $(SKHELPER_OBJS)
 	$(LD) -o $@ $(SKHELPER_OBJS) $(LDFLAGS) -lssh -lopenbsd-compat -lssh -lopenbsd-compat $(LIBS) $(LIBFIDO2)
 
+ctr-cavstest$(EXEEXT): $(LIBCOMPAT) libssh.a ctr-cavstest.o
+	$(LD) -o $@ ctr-cavstest.o $(LDFLAGS) -lssh -lopenbsd-compat -lssh -lfipscheck $(LIBS)
+
 ssh-keyscan$(EXEEXT): $(LIBCOMPAT) libssh.a $(SSHKEYSCAN_OBJS)
 	$(LD) -o $@ $(SSHKEYSCAN_OBJS) $(LDFLAGS) -lssh -lopenbsd-compat -lssh -lfipscheck $(LIBS)
 
@@ -389,6 +393,7 @@ install-files:
 	$(INSTALL) -m 4711 $(STRIP_OPT) ssh-keysign$(EXEEXT) $(DESTDIR)$(SSH_KEYSIGN)$(EXEEXT)
 	$(INSTALL) -m 0755 $(STRIP_OPT) ssh-pkcs11-helper$(EXEEXT) $(DESTDIR)$(SSH_PKCS11_HELPER)$(EXEEXT)
 	$(INSTALL) -m 0755 $(STRIP_OPT) ssh-sk-helper$(EXEEXT) $(DESTDIR)$(SSH_SK_HELPER)$(EXEEXT)
+	$(INSTALL) -m 0755 $(STRIP_OPT) ctr-cavstest$(EXEEXT) $(DESTDIR)$(libexecdir)/ctr-cavstest$(EXEEXT)
 	$(INSTALL) -m 0755 $(STRIP_OPT) sftp$(EXEEXT) $(DESTDIR)$(bindir)/sftp$(EXEEXT)
 	$(INSTALL) -m 0755 $(STRIP_OPT) sftp-server$(EXEEXT) $(DESTDIR)$(SFTP_SERVER)$(EXEEXT)
 	$(INSTALL) -m 644 ssh.1.out $(DESTDIR)$(mandir)/$(mansubdir)1/ssh.1
diff --git a/ctr-cavstest.c b/ctr-cavstest.c
new file mode 100644
index 0000000..0d4776b
--- /dev/null
+++ b/ctr-cavstest.c
@@ -0,0 +1,215 @@
+/*
+ *
+ * invocation (all of the following are equal):
+ * ./ctr-cavstest --algo aes128-ctr --key 987212980144b6a632e864031f52dacc --mode encrypt --data a6deca405eef2e8e4609abf3c3ccf4a6
+ * ./ctr-cavstest --algo aes128-ctr --key 987212980144b6a632e864031f52dacc --mode encrypt --data a6deca405eef2e8e4609abf3c3ccf4a6 --iv 00000000000000000000000000000000
+ * echo -n a6deca405eef2e8e4609abf3c3ccf4a6 | ./ctr-cavstest --algo aes128-ctr --key 987212980144b6a632e864031f52dacc --mode encrypt
+ */
+
+#include "includes.h"
+
+#include <sys/types.h>
+#include <sys/param.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <ctype.h>
+
+#include "xmalloc.h"
+#include "log.h"
+#include "ssherr.h"
+#include "cipher.h"
+
+/* compatibility with old or broken OpenSSL versions */
+#include "openbsd-compat/openssl-compat.h"
+
+void usage(void) {
+        fprintf(stderr, "Usage: ctr-cavstest --algo <ssh-crypto-algorithm>\n"
+                        "                    --key <hexadecimal-key> --mode <encrypt|decrypt>\n"
+                        "                    [--iv <hexadecimal-iv>] --data <hexadecimal-data>\n\n"
+                        "Hexadecimal output is printed to stdout.\n"
+                        "Hexadecimal input data can be alternatively read from stdin.\n");
+        exit(1);
+}
+
+void *fromhex(char *hex, size_t *len)
+{
+        unsigned char *bin;
+        char *p;
+        size_t n = 0;
+        int shift = 4;
+        unsigned char out = 0;
+        unsigned char *optr;
+
+        bin = xmalloc(strlen(hex)/2);
+        optr = bin;
+
+        for (p = hex; *p != '\0'; ++p) {
+                unsigned char c;
+
+                c = *p;
+                if (isspace(c))
+                        continue;
+
+                if (c >= '0' && c <= '9') {
+                        c = c - '0';
+                } else if (c >= 'A' && c <= 'F') {
+                        c = c - 'A' + 10;
+                } else if (c >= 'a' && c <= 'f') {
+                        c = c - 'a' + 10;
+                } else {
+                        /* truncate on nonhex cipher */
+                        break;
+                }
+
+                out |= c << shift;
+                shift = (shift + 4) % 8;
+
+                if (shift) {
+                        *(optr++) = out;
+                        out = 0;
+                        ++n;
+                }
+        }
+
+        *len = n;
+        return bin;
+}
+
+#define READ_CHUNK 4096
+#define MAX_READ_SIZE 1024*1024*100
+char *read_stdin(void)
+{
+        char *buf;
+        size_t n, total = 0;
+
+        buf = xmalloc(READ_CHUNK);
+
+        do {
+                n = fread(buf + total, 1, READ_CHUNK, stdin);
+                if (n < READ_CHUNK) /* terminate on short read */
+                        break;
+
+                total += n;
+                buf = xreallocarray(buf, total + READ_CHUNK, 1);
+        } while(total < MAX_READ_SIZE);
+        return buf;
+}
+
+int main (int argc, char *argv[])
+{
+
+        const struct sshcipher *c;
+        struct sshcipher_ctx *cc;
+        char *algo = "aes128-ctr";
+        char *hexkey = NULL;
+        char *hexiv = "00000000000000000000000000000000";
+        char *hexdata = NULL;
+        char *p;
+        int i, r;
+        int encrypt = 1;
+        void *key;
+        size_t keylen;
+        void *iv;
+        size_t ivlen;
+        void *data;
+        size_t datalen;
+        void *outdata;
+
+        for (i = 1; i < argc; ++i) {
+                if (strcmp(argv[i], "--algo") == 0) {
+                        algo = argv[++i];
+                } else if (strcmp(argv[i], "--key") == 0) {
+                        hexkey = argv[++i];
+                } else if (strcmp(argv[i], "--mode") == 0) {
+                        ++i;
+                        if (argv[i] == NULL) {
+                                usage();
+                        }
+                        if (strncmp(argv[i], "enc", 3) == 0) {
+                                encrypt = 1;
+                        } else if (strncmp(argv[i], "dec", 3) == 0) {
+                                encrypt = 0;
+                        } else {
+                                usage();
+                        }
+                } else if (strcmp(argv[i], "--iv") == 0) {
+                        hexiv = argv[++i];
+                } else if (strcmp(argv[i], "--data") == 0) {
+                        hexdata = argv[++i];
+                }
+        }
+
+        if (hexkey == NULL || algo == NULL) {
+                usage();
+        }
+
+	OpenSSL_add_all_algorithms();
+
+	c = cipher_by_name(algo);
+	if (c == NULL) {
+		fprintf(stderr, "Error: unknown algorithm\n");
+		return 2;
+	}
+
+        if (hexdata == NULL) {
+                hexdata = read_stdin();
+        } else {
+                hexdata = xstrdup(hexdata);
+        }
+
+        key = fromhex(hexkey, &keylen);
+
+	if (keylen != 16 && keylen != 24 && keylen == 32) {
+		fprintf(stderr, "Error: unsupported key length\n");
+		return 2;
+	}
+
+        iv = fromhex(hexiv, &ivlen);
+
+        if (ivlen != 16) {
+		fprintf(stderr, "Error: unsupported iv length\n");
+		return 2;
+        }
+
+        data = fromhex(hexdata, &datalen);
+
+	if (data == NULL || datalen == 0) {
+		fprintf(stderr, "Error: no data to encrypt/decrypt\n");
+		return 2;
+	}
+
+	if ((r = cipher_init(&cc, c, key, keylen, iv, ivlen, encrypt)) != 0) {
+		fprintf(stderr, "Error: cipher_init failed: %s\n", ssh_err(r));
+		return 2;
+	}
+
+	free(key);
+	free(iv);
+
+	outdata = malloc(datalen);
+	if(outdata == NULL) {
+		fprintf(stderr, "Error: memory allocation failure\n");
+		return 2;
+	}
+
+	if ((r = cipher_crypt(cc, 0, outdata, data, datalen, 0, 0)) != 0) {
+		fprintf(stderr, "Error: cipher_crypt failed: %s\n", ssh_err(r));
+		return 2;
+	}
+
+	free(data);
+
+	cipher_free(cc);
+
+        for (p = outdata; datalen > 0; ++p, --datalen) {
+		printf("%02X", (unsigned char)*p);
+	}
+
+        free(outdata);
+
+        printf("\n");
+        return 0;
+}
+
-- 
2.7.4

